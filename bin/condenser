#!/usr/bin/python
# vi: ts=4 expandtab
#
#    Copyright (C) 2009-2010 Canonical Ltd.
#    Copyright (C) 2012 Hewlett-Packard Development Company, L.P.
#
#    Author: Scott Moser <scott.moser@canonical.com>
#    Author: Juerg Haefliger <juerg.haefliger@hp.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License version 3, as
#    published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import subprocess
import sys
import time
import traceback

from optparse import OptionParser

from condense.exceptions import DataSourceNotFoundException
from condense import (get_base_cfg, get_builtin_cfg, initfs,
                      get_cpath,  get_ipath_cur, per_always)
from condense import (Init, Config)
from condense.handlers import (read_cc_modules, run_cc_modules)
from condense.data_source import (DEP_FILESYSTEM, DEP_NETWORK)
from condense.settings import (stage_tpl, log_file_tpl)

from condense import log
from condense import logging
from condense import netinfo
from condense import util


def warn(wstr):
    sys.stderr.write("WARN: %s\n" % wstr)
    sys.stderr.flush()


def fatality(msg='', rc=0):
    if msg:
        if rc != 0:
            log.warn(msg)
        else:
            log.info(msg)
    return rc


def get_now():
    now = time.strftime("%a, %d %b %Y %H:%M:%S %z", time.gmtime())
    return now


def form_stage_name(part):
    return stage_tpl % (part)


def main_start(app_name, test_file, **kwargs):
    cfg_path = test_file
    deps = (DEP_FILESYSTEM, DEP_NETWORK)
    try:
        log.info("Base config loading from: %s", (cfg_path))
        cfg = get_base_cfg(cfg_path)
    except Exception as e:
        log.exception("Failed to get base config. Falling back to builtin.")
        cfg = get_builtin_cfg()

    log.info("Using base config %s", cfg)
    try:
        initfs()
    except Exception as e:
        log.warn("Failed to init the filesystem, likely bad things to come: %s" % (e))

    stop_files = [get_ipath_cur("obj_pkl")]
    for fn in stop_files:
        try:
            with open(fn, "r"):
                pass
        except:
            continue
        return fatality("No need for start to run due to existence of: %r" % (fn))

    init_deps = deps
    log.info("Dependencies are: %s", init_deps)
    log.info("Network info is: \n%s", netinfo.debug_info())

    cloud = Init(ds_deps=init_deps)
    log.info("Init config is %s", cloud.cfg)
    try:
        cloud.get_data_source()
    except DataSourceNotFoundException as e:
        return fatality("No data found: %s" % e, rc=1)

    # set this as the current instance
    iid = cloud.set_cur_instance()
    log.info("Current instance is: %r", str(iid))

    # store the metadata
    cloud.update_cache()
    log.info("Applying data source: %r" % cloud.datasource)

    # parse the user data (ec2-run-userdata.py)
    try:
        cloud.consume_userdata(per_always)
    except Exception as e:
        log.exception("Consuming user data failed!")
        raise

    # run the initial modules
    cfg_path = get_ipath_cur("cloud_config")
    cc = Config(cfg_path, cloud)
    log.info("Using real config: %s", cc.cfg)

    module_list = read_cc_modules(cc.cfg, form_stage_name('init'))
    failures = run_cc_modules(cc, module_list, log)
    fail_count = len(failures)
    if fail_count:
        return fatality("Errors running modules: [%s]" % (failures), rc=len(failures))

    # send the start next stage event
    emit_cmd = ['initctl', 'emit', 'condense-config']
    emit_cmd.append("%s=%s" % ('CLOUD_CFG', cfg_path))
    util.subp(emit_cmd)

    return 0


def main_continue(action, app_name, **kwargs):

    cloud = Init(ds_deps=[])  # ds_deps=[], get only cached
    log.info("Init config is %s", cloud.cfg)

    try:
        cloud.get_data_source()
    except DataSourceNotFoundException as ex:
        return fatality("No datasource found: %s" % ex)

    log.info("Applying data source: %r" % cloud.datasource)

    cfg_path = get_ipath_cur("cloud_config")
    cc = Config(cfg_path, cloud)
    log.info("Using real config: %s", cc.cfg)

    module_list = read_cc_modules(cc.cfg, form_stage_name(action))
    failures = run_cc_modules(cc, module_list, log)

    if len(failures):
        return fatality("Errors running modules [%s]: %s" % (action, failures), rc=len(failures))

    return 0


def setup_logging(opts):
    out_fn = log_file_tpl % (opts['action'])
    if opts['verbosity'] > 1:
        logging.setupLogging(logging.DEBUG, fn=out_fn)
    else:
        logging.setupLogging(logging.INFO, fn=out_fn)


ACTION_FUNCS = {
    'start': main_start,
    'final': main_continue,
    'config': main_continue,
}
VALID_OPTIONS = sorted(ACTION_FUNCS.keys())


def extract_opts():
    parser = OptionParser()
    parser.add_option("-f", "--file", dest="test_file", action="store",
                  help="test file to use for base configuration",
                  metavar="FILE")
    parser.add_option("-a", "--action", dest="action", action="store",
                  help="action to take, one of (%s)" % (", ".join(VALID_OPTIONS)),
                  metavar="ACTION", default="")
    parser.add_option("-v", "--verbose",
        action="append_const",
        const=1,
        dest="verbosity",
        default=[1],
        help="increase the verbosity level")
    (options, args) = parser.parse_args()
    out = dict()
    action = options.action or ''
    out['action'] = action.lower().strip()
    out['test_file'] = options.test_file
    out['verbosity'] = len(options.verbosity)
    out['extra'] = args
    return out


def verify_opts(opts):
    action = opts['action']
    if not action in VALID_OPTIONS:
        return False
    fn = opts['test_file']
    if fn:
        if not os.path.isfile(fn):
            return False
    return True


def main():

    me = os.path.basename(sys.argv[0])
    opts = extract_opts()

    if not verify_opts(opts):
        print("Perhaps you should try '%s --help'" % (me))
        return 1

    if not os.geteuid() == 0:
        print("'%s' must be run as root!" % (me))
        return 1

    util.close_stdin()
    uptime = 'na'
    try:
        with open("/proc/uptime", 'r') as fh:
            contents = fh.read().strip()
        data = contents.split(" ")
        if data and data[0]:
            uptime_f = data[0].strip()
            if uptime_f:
                uptime = uptime_f
    except IOError:
        warn("Unable to open /proc/uptime")

    setup_logging(opts)
    opts['uptime'] = uptime
    opts['app_name'] = me
    log.info("Starting action %r" % (opts['action']))
    log.info("System has been up %s seconds.", uptime)
    func = ACTION_FUNCS[opts['action']]
    rc = func(**opts)
    log.info("Finished with return code: %s", rc)
    return rc


if __name__ == '__main__':
    try:
        sys.exit(main())
    except Exception as e:
        rc = fatality("Broke due to: %s" % e, rc=1)
        traceback.print_exc(file=sys.stderr)
        sys.exit(rc)
